import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useForm } from "react-hook-form";
import * as yup from 'yup';
import {yupResolver} from '@hookform/resolvers/yup';
import React, {useState} from 'react';
import {hasSpecialCharts, getSanitizedAdress, isPOBoxAdress} from './model/adress';

export default function Home(props) { 
    const [isPOBox, setIsPOBox] = useState(false);
    const [hasSpecialChars, setHasSpecialChars] = useState(false);
    const [sanitized, setSanitized] = useState("");

   const schema = yup.object().shape({
      firstName: yup.string().min(3).max(30).required(),
      lastName: yup.string().min(3).max(30).required(),
      adress: yup.string().min(8).max(32).required(),
      secondAdress: yup.string().nullable(),
    });
    

  const initialFormState = { firstName: '', lastName: '' , adress: '', secondAdress:'' };
  const { register, formState: {errors}, handleSubmit, setValue ,reset, watch } = useForm({
    defaultValues: props.user ? props.user : initialFormState,
    resolver: yupResolver(schema),
  });

  let myJson = JSON.stringify(watch());

  const onSubmit = (data) => { 
  const hasSpecialElems = hasSpecialCharts(data.adress);
  setHasSpecialChars(hasSpecialElems);
  const cleanPOBoxAdress = getSanitizedAdress(data.adress);
  setSanitized(cleanPOBoxAdress);
  const isPOBox = isPOBoxAdress(cleanPOBoxAdress)
  setIsPOBox(isPOBox);

  setValue('firstName', data.firstName); 
  setValue('lastName', data.lastName);
  setValue('adress', data.adress);
  setValue('secondAdress', data.secondAdressValidate);

 }
  
  return (
    <div className={styles.container}>
      <Head>
        <title>Coding practice- HS</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
          <h1 className={styles.title}>
          <a>User Information</a>
          </h1>
          
       <form onSubmit={handleSubmit(onSubmit)}>
          <div className={styles.label}>
          <label for="firstName">First Name:</label>
          <input type="text" id="firstName" name="firstName" 
           {...register('firstName', { 
            required: true,
           })}></input>
          <div className={styles.error} role="alertdialog"  data-testid="first-name-element">{errors?.firstName?.message}</div>
          </div>

          <div className={styles.label}>
          <label for="lastName">Last Name:</label>
          <input type="text" id="lastName" name="lastName" 
            {...register('lastName', { required: true})}>
          </input>
           <div className={styles.error} role="alertdialog" data-testid="last-name-element">{errors?.lastName?.message}</div>
          </div>

          <div className={styles.label}>
          <label for="adress">First-Adress:</label>
          <input type="text" id="adress" name="adress" 
         {...register('adress', { required: true })}>
          </input>
           <div className={styles.error} data-testid="adress-element" id="test" name="test" role="alertdialog">{errors?.adress?.message}</div>
          </div>

          <div className={styles.label}>
          <label for="secondAdress">Second-Adress:</label>
          <input type="text" id="secondAdress" name="secondAdress" 
          {...register('secondAdress', { required: false })}>
          </input>
          </div>

          <div className={styles.label}>
          <h4 id="hasSpecialChars"> Address has any special characters?:<div data-testid="specialchars-element">{hasSpecialChars.toString()}</div></h4>
          </div>

         <div className={styles.label}>
          <h4 id="cleanAddress" >Generated sanitized address: <div data-testid="sanitized-element">{sanitized}</div></h4>
          </div>

         <div className={styles.label}>
          <h4 id="isPOBoxAdress"> The address is a PO Box?:<div data-testid="pobox-element">{isPOBox.toString()}</div></h4>
        </div>

          {<pre>{myJson}</pre>}

          <div className={styles.title}>
          <button type='submit' >Validate</button>
          </div>  
          </form>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

